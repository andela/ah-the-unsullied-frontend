// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    auth={Object {}}
    loginUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <form
        onSubmit={[Function]}
      >
        <Input
          checked={false}
          id="email"
          label="Email"
          onChange={[Function]}
          required={true}
          s={12}
          type="email"
        />
        <Input
          checked={false}
          id="password"
          label="password"
          onChange={[Function]}
          required={true}
          s={12}
          type="password"
        />
        <div
          className="data"
        >
          <button
            className="btn pink lighten-1 z-depth-0"
            id="loginBtn"
          >
            Login
          </button>
          <a
            className="pass-reset"
            href="/password-reset"
          >
            <div
              className="loader"
            >
              <Unknown
                component="div"
                loaded={true}
                loadedClassName="loadedContent"
                parentClassName="loader"
              />
            </div>
            Forgot Password?
          </a>
          <p>
            Dont have an account? 
            <a
              href="/signup"
            >
               SignUp
            </a>
          </p>
        </div>
      </form>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Input
            checked={false}
            id="email"
            label="Email"
            onChange={[Function]}
            required={true}
            s={12}
            type="email"
          />,
          <Input
            checked={false}
            id="password"
            label="password"
            onChange={[Function]}
            required={true}
            s={12}
            type="password"
          />,
          <div
            className="data"
          >
            <button
              className="btn pink lighten-1 z-depth-0"
              id="loginBtn"
            >
              Login
            </button>
            <a
              className="pass-reset"
              href="/password-reset"
            >
              <div
                className="loader"
              >
                <Unknown
                  component="div"
                  loaded={true}
                  loadedClassName="loadedContent"
                  parentClassName="loader"
                />
              </div>
              Forgot Password?
            </a>
            <p>
              Dont have an account? 
              <a
                href="/signup"
              >
                 SignUp
              </a>
            </p>
          </div>,
        ],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "checked": false,
            "id": "email",
            "label": "Email",
            "onChange": [Function],
            "required": true,
            "s": 12,
            "type": "email",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "checked": false,
            "id": "password",
            "label": "password",
            "onChange": [Function],
            "required": true,
            "s": 12,
            "type": "password",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="btn pink lighten-1 z-depth-0"
                id="loginBtn"
              >
                Login
              </button>,
              <a
                className="pass-reset"
                href="/password-reset"
              >
                <div
                  className="loader"
                >
                  <Unknown
                    component="div"
                    loaded={true}
                    loadedClassName="loadedContent"
                    parentClassName="loader"
                  />
                </div>
                Forgot Password?
              </a>,
              <p>
                Dont have an account? 
                <a
                  href="/signup"
                >
                   SignUp
                </a>
              </p>,
            ],
            "className": "data",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Login",
                "className": "btn pink lighten-1 z-depth-0",
                "id": "loginBtn",
              },
              "ref": null,
              "rendered": "Login",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="loader"
                  >
                    <Unknown
                      component="div"
                      loaded={true}
                      loadedClassName="loadedContent"
                      parentClassName="loader"
                    />
                  </div>,
                  "Forgot Password?",
                ],
                "className": "pass-reset",
                "href": "/password-reset",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Unknown
                      component="div"
                      loaded={true}
                      loadedClassName="loadedContent"
                      parentClassName="loader"
                    />,
                    "className": "loader",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": "div",
                      "loaded": true,
                      "loadedClassName": "loadedContent",
                      "parentClassName": "loader",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
                "Forgot Password?",
              ],
              "type": "a",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Dont have an account? ",
                  <a
                    href="/signup"
                  >
                     SignUp
                  </a>,
                ],
              },
              "ref": null,
              "rendered": Array [
                "Dont have an account? ",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": " SignUp",
                    "href": "/signup",
                  },
                  "ref": null,
                  "rendered": " SignUp",
                  "type": "a",
                },
              ],
              "type": "p",
            },
          ],
          "type": "div",
        },
      ],
      "type": "form",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <form
          onSubmit={[Function]}
        >
          <Input
            checked={false}
            id="email"
            label="Email"
            onChange={[Function]}
            required={true}
            s={12}
            type="email"
          />
          <Input
            checked={false}
            id="password"
            label="password"
            onChange={[Function]}
            required={true}
            s={12}
            type="password"
          />
          <div
            className="data"
          >
            <button
              className="btn pink lighten-1 z-depth-0"
              id="loginBtn"
            >
              Login
            </button>
            <a
              className="pass-reset"
              href="/password-reset"
            >
              <div
                className="loader"
              >
                <Unknown
                  component="div"
                  loaded={true}
                  loadedClassName="loadedContent"
                  parentClassName="loader"
                />
              </div>
              Forgot Password?
            </a>
            <p>
              Dont have an account? 
              <a
                href="/signup"
              >
                 SignUp
              </a>
            </p>
          </div>
        </form>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Input
              checked={false}
              id="email"
              label="Email"
              onChange={[Function]}
              required={true}
              s={12}
              type="email"
            />,
            <Input
              checked={false}
              id="password"
              label="password"
              onChange={[Function]}
              required={true}
              s={12}
              type="password"
            />,
            <div
              className="data"
            >
              <button
                className="btn pink lighten-1 z-depth-0"
                id="loginBtn"
              >
                Login
              </button>
              <a
                className="pass-reset"
                href="/password-reset"
              >
                <div
                  className="loader"
                >
                  <Unknown
                    component="div"
                    loaded={true}
                    loadedClassName="loadedContent"
                    parentClassName="loader"
                  />
                </div>
                Forgot Password?
              </a>
              <p>
                Dont have an account? 
                <a
                  href="/signup"
                >
                   SignUp
                </a>
              </p>
            </div>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "checked": false,
              "id": "email",
              "label": "Email",
              "onChange": [Function],
              "required": true,
              "s": 12,
              "type": "email",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "checked": false,
              "id": "password",
              "label": "password",
              "onChange": [Function],
              "required": true,
              "s": 12,
              "type": "password",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <button
                  className="btn pink lighten-1 z-depth-0"
                  id="loginBtn"
                >
                  Login
                </button>,
                <a
                  className="pass-reset"
                  href="/password-reset"
                >
                  <div
                    className="loader"
                  >
                    <Unknown
                      component="div"
                      loaded={true}
                      loadedClassName="loadedContent"
                      parentClassName="loader"
                    />
                  </div>
                  Forgot Password?
                </a>,
                <p>
                  Dont have an account? 
                  <a
                    href="/signup"
                  >
                     SignUp
                  </a>
                </p>,
              ],
              "className": "data",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Login",
                  "className": "btn pink lighten-1 z-depth-0",
                  "id": "loginBtn",
                },
                "ref": null,
                "rendered": "Login",
                "type": "button",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="loader"
                    >
                      <Unknown
                        component="div"
                        loaded={true}
                        loadedClassName="loadedContent"
                        parentClassName="loader"
                      />
                    </div>,
                    "Forgot Password?",
                  ],
                  "className": "pass-reset",
                  "href": "/password-reset",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <Unknown
                        component="div"
                        loaded={true}
                        loadedClassName="loadedContent"
                        parentClassName="loader"
                      />,
                      "className": "loader",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "component": "div",
                        "loaded": true,
                        "loadedClassName": "loadedContent",
                        "parentClassName": "loader",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "div",
                  },
                  "Forgot Password?",
                ],
                "type": "a",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Dont have an account? ",
                    <a
                      href="/signup"
                    >
                       SignUp
                    </a>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Dont have an account? ",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": " SignUp",
                      "href": "/signup",
                    },
                    "ref": null,
                    "rendered": " SignUp",
                    "type": "a",
                  },
                ],
                "type": "p",
              },
            ],
            "type": "div",
          },
        ],
        "type": "form",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
