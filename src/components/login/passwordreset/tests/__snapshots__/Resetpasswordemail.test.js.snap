// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Resetemail
    sendEmail={[MockFunction]}
    sendemail={Object {}}
    sendemailerr={
      Object {
        "sendemailerr": Object {
          "sendemailerr": Object {
            "error": "",
          },
        },
      }
    }
    success={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="homediv"
      >
        <h2>
          Password reset
        </h2>
        <form
          className="emailform"
          onSubmit={[Function]}
        >
          <label
            htmlFor="email"
          >
            Enter email:
          </label>
          <input
            className="input"
            onChange={[Function]}
            placeholder="Your email.."
            require={true}
            type="email"
          />
          <div
            className="preloader-wrapper small active"
            id="loader-div"
            style={
              Object {
                "display": "none",
                "margin": "auto",
              }
            }
          >
            <div
              className="spinner-layer spinner-green-only"
            >
              <div
                className="circle-clipper left"
              >
                <div
                  className="circle"
                />
              </div>
              <div
                className="gap-patch"
              >
                <div
                  className="circle"
                />
              </div>
              <div
                className="circle-clipper right"
              >
                <div
                  className="circle"
                />
              </div>
            </div>
          </div>
          <br />
          <label
            htmlFor="sucess"
            style={
              Object {
                "color": "green",
              }
            }
          >
            Object {}
          </label>
          <label
            htmlFor="invalid"
            style={
              Object {
                "color": "red",
              }
            }
          >
            
          </label>
          <label
            htmlFor="unregisterd"
            style={
              Object {
                "color": "red",
              }
            }
          />
          <br />
          <input
            type="submit"
            value="Submit"
          />
        </form>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Password reset
          </h2>,
          <form
            className="emailform"
            onSubmit={[Function]}
          >
            <label
              htmlFor="email"
            >
              Enter email:
            </label>
            <input
              className="input"
              onChange={[Function]}
              placeholder="Your email.."
              require={true}
              type="email"
            />
            <div
              className="preloader-wrapper small active"
              id="loader-div"
              style={
                Object {
                  "display": "none",
                  "margin": "auto",
                }
              }
            >
              <div
                className="spinner-layer spinner-green-only"
              >
                <div
                  className="circle-clipper left"
                >
                  <div
                    className="circle"
                  />
                </div>
                <div
                  className="gap-patch"
                >
                  <div
                    className="circle"
                  />
                </div>
                <div
                  className="circle-clipper right"
                >
                  <div
                    className="circle"
                  />
                </div>
              </div>
            </div>
            <br />
            <label
              htmlFor="sucess"
              style={
                Object {
                  "color": "green",
                }
              }
            >
              Object {}
            </label>
            <label
              htmlFor="invalid"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <label
              htmlFor="unregisterd"
              style={
                Object {
                  "color": "red",
                }
              }
            />
            <br />
            <input
              type="submit"
              value="Submit"
            />
          </form>,
        ],
        "className": "homediv",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Password reset",
          },
          "ref": null,
          "rendered": "Password reset",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                htmlFor="email"
              >
                Enter email:
              </label>,
              <input
                className="input"
                onChange={[Function]}
                placeholder="Your email.."
                require={true}
                type="email"
              />,
              <div
                className="preloader-wrapper small active"
                id="loader-div"
                style={
                  Object {
                    "display": "none",
                    "margin": "auto",
                  }
                }
              >
                <div
                  className="spinner-layer spinner-green-only"
                >
                  <div
                    className="circle-clipper left"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="gap-patch"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="circle-clipper right"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                </div>
              </div>,
              <br />,
              <label
                htmlFor="sucess"
                style={
                  Object {
                    "color": "green",
                  }
                }
              >
                Object {}
              </label>,
              <label
                htmlFor="invalid"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>,
              <label
                htmlFor="unregisterd"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />,
              <br />,
              <input
                type="submit"
                value="Submit"
              />,
            ],
            "className": "emailform",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Enter email:",
                "htmlFor": "email",
              },
              "ref": null,
              "rendered": "Enter email:",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "input",
                "onChange": [Function],
                "placeholder": "Your email..",
                "require": true,
                "type": "email",
              },
              "ref": [Function],
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="spinner-layer spinner-green-only"
                >
                  <div
                    className="circle-clipper left"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="gap-patch"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="circle-clipper right"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                </div>,
                "className": "preloader-wrapper small active",
                "id": "loader-div",
                "style": Object {
                  "display": "none",
                  "margin": "auto",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="circle-clipper left"
                    >
                      <div
                        className="circle"
                      />
                    </div>,
                    <div
                      className="gap-patch"
                    >
                      <div
                        className="circle"
                      />
                    </div>,
                    <div
                      className="circle-clipper right"
                    >
                      <div
                        className="circle"
                      />
                    </div>,
                  ],
                  "className": "spinner-layer spinner-green-only",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="circle"
                      />,
                      "className": "circle-clipper left",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "circle",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="circle"
                      />,
                      "className": "gap-patch",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "circle",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="circle"
                      />,
                      "className": "circle-clipper right",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "circle",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Object {},
                "htmlFor": "sucess",
                "style": Object {
                  "color": "green",
                },
              },
              "ref": null,
              "rendered": Object {},
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "htmlFor": "invalid",
                "style": Object {
                  "color": "red",
                },
              },
              "ref": null,
              "rendered": "",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "htmlFor": "unregisterd",
                "style": Object {
                  "color": "red",
                },
              },
              "ref": null,
              "rendered": null,
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
                "value": "Submit",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="homediv"
        >
          <h2>
            Password reset
          </h2>
          <form
            className="emailform"
            onSubmit={[Function]}
          >
            <label
              htmlFor="email"
            >
              Enter email:
            </label>
            <input
              className="input"
              onChange={[Function]}
              placeholder="Your email.."
              require={true}
              type="email"
            />
            <div
              className="preloader-wrapper small active"
              id="loader-div"
              style={
                Object {
                  "display": "none",
                  "margin": "auto",
                }
              }
            >
              <div
                className="spinner-layer spinner-green-only"
              >
                <div
                  className="circle-clipper left"
                >
                  <div
                    className="circle"
                  />
                </div>
                <div
                  className="gap-patch"
                >
                  <div
                    className="circle"
                  />
                </div>
                <div
                  className="circle-clipper right"
                >
                  <div
                    className="circle"
                  />
                </div>
              </div>
            </div>
            <br />
            <label
              htmlFor="sucess"
              style={
                Object {
                  "color": "green",
                }
              }
            >
              Object {}
            </label>
            <label
              htmlFor="invalid"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <label
              htmlFor="unregisterd"
              style={
                Object {
                  "color": "red",
                }
              }
            />
            <br />
            <input
              type="submit"
              value="Submit"
            />
          </form>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h2>
              Password reset
            </h2>,
            <form
              className="emailform"
              onSubmit={[Function]}
            >
              <label
                htmlFor="email"
              >
                Enter email:
              </label>
              <input
                className="input"
                onChange={[Function]}
                placeholder="Your email.."
                require={true}
                type="email"
              />
              <div
                className="preloader-wrapper small active"
                id="loader-div"
                style={
                  Object {
                    "display": "none",
                    "margin": "auto",
                  }
                }
              >
                <div
                  className="spinner-layer spinner-green-only"
                >
                  <div
                    className="circle-clipper left"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="gap-patch"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="circle-clipper right"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                </div>
              </div>
              <br />
              <label
                htmlFor="sucess"
                style={
                  Object {
                    "color": "green",
                  }
                }
              >
                Object {}
              </label>
              <label
                htmlFor="invalid"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>
              <label
                htmlFor="unregisterd"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
              <br />
              <input
                type="submit"
                value="Submit"
              />
            </form>,
          ],
          "className": "homediv",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Password reset",
            },
            "ref": null,
            "rendered": "Password reset",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <label
                  htmlFor="email"
                >
                  Enter email:
                </label>,
                <input
                  className="input"
                  onChange={[Function]}
                  placeholder="Your email.."
                  require={true}
                  type="email"
                />,
                <div
                  className="preloader-wrapper small active"
                  id="loader-div"
                  style={
                    Object {
                      "display": "none",
                      "margin": "auto",
                    }
                  }
                >
                  <div
                    className="spinner-layer spinner-green-only"
                  >
                    <div
                      className="circle-clipper left"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                    <div
                      className="gap-patch"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                    <div
                      className="circle-clipper right"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                  </div>
                </div>,
                <br />,
                <label
                  htmlFor="sucess"
                  style={
                    Object {
                      "color": "green",
                    }
                  }
                >
                  Object {}
                </label>,
                <label
                  htmlFor="invalid"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                >
                  
                </label>,
                <label
                  htmlFor="unregisterd"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />,
                <br />,
                <input
                  type="submit"
                  value="Submit"
                />,
              ],
              "className": "emailform",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Enter email:",
                  "htmlFor": "email",
                },
                "ref": null,
                "rendered": "Enter email:",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "input",
                  "onChange": [Function],
                  "placeholder": "Your email..",
                  "require": true,
                  "type": "email",
                },
                "ref": [Function],
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="spinner-layer spinner-green-only"
                  >
                    <div
                      className="circle-clipper left"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                    <div
                      className="gap-patch"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                    <div
                      className="circle-clipper right"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                  </div>,
                  "className": "preloader-wrapper small active",
                  "id": "loader-div",
                  "style": Object {
                    "display": "none",
                    "margin": "auto",
                  },
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="circle-clipper left"
                      >
                        <div
                          className="circle"
                        />
                      </div>,
                      <div
                        className="gap-patch"
                      >
                        <div
                          className="circle"
                        />
                      </div>,
                      <div
                        className="circle-clipper right"
                      >
                        <div
                          className="circle"
                        />
                      </div>,
                    ],
                    "className": "spinner-layer spinner-green-only",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <div
                          className="circle"
                        />,
                        "className": "circle-clipper left",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "circle",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "div",
                      },
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <div
                          className="circle"
                        />,
                        "className": "gap-patch",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "circle",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "div",
                      },
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <div
                          className="circle"
                        />,
                        "className": "circle-clipper right",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "circle",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "div",
                      },
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Object {},
                  "htmlFor": "sucess",
                  "style": Object {
                    "color": "green",
                  },
                },
                "ref": null,
                "rendered": Object {},
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "htmlFor": "invalid",
                  "style": Object {
                    "color": "red",
                  },
                },
                "ref": null,
                "rendered": "",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "htmlFor": "unregisterd",
                  "style": Object {
                    "color": "red",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Submit",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`component should render email form 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Resetemail
    sendEmail={[MockFunction]}
    sendemail={Object {}}
    sendemailerr={
      Object {
        "sendemailerr": Object {
          "sendemailerr": Object {
            "error": "",
          },
        },
      }
    }
    success={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="homediv"
      >
        <h2>
          Password reset
        </h2>
        <form
          className="emailform"
          onSubmit={[Function]}
        >
          <label
            htmlFor="email"
          >
            Enter email:
          </label>
          <input
            className="input"
            onChange={[Function]}
            placeholder="Your email.."
            require={true}
            type="email"
          />
          <div
            className="preloader-wrapper small active"
            id="loader-div"
            style={
              Object {
                "display": "none",
                "margin": "auto",
              }
            }
          >
            <div
              className="spinner-layer spinner-green-only"
            >
              <div
                className="circle-clipper left"
              >
                <div
                  className="circle"
                />
              </div>
              <div
                className="gap-patch"
              >
                <div
                  className="circle"
                />
              </div>
              <div
                className="circle-clipper right"
              >
                <div
                  className="circle"
                />
              </div>
            </div>
          </div>
          <br />
          <label
            htmlFor="sucess"
            style={
              Object {
                "color": "green",
              }
            }
          >
            Object {}
          </label>
          <label
            htmlFor="invalid"
            style={
              Object {
                "color": "red",
              }
            }
          >
            
          </label>
          <label
            htmlFor="unregisterd"
            style={
              Object {
                "color": "red",
              }
            }
          />
          <br />
          <input
            type="submit"
            value="Submit"
          />
        </form>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Password reset
          </h2>,
          <form
            className="emailform"
            onSubmit={[Function]}
          >
            <label
              htmlFor="email"
            >
              Enter email:
            </label>
            <input
              className="input"
              onChange={[Function]}
              placeholder="Your email.."
              require={true}
              type="email"
            />
            <div
              className="preloader-wrapper small active"
              id="loader-div"
              style={
                Object {
                  "display": "none",
                  "margin": "auto",
                }
              }
            >
              <div
                className="spinner-layer spinner-green-only"
              >
                <div
                  className="circle-clipper left"
                >
                  <div
                    className="circle"
                  />
                </div>
                <div
                  className="gap-patch"
                >
                  <div
                    className="circle"
                  />
                </div>
                <div
                  className="circle-clipper right"
                >
                  <div
                    className="circle"
                  />
                </div>
              </div>
            </div>
            <br />
            <label
              htmlFor="sucess"
              style={
                Object {
                  "color": "green",
                }
              }
            >
              Object {}
            </label>
            <label
              htmlFor="invalid"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <label
              htmlFor="unregisterd"
              style={
                Object {
                  "color": "red",
                }
              }
            />
            <br />
            <input
              type="submit"
              value="Submit"
            />
          </form>,
        ],
        "className": "homediv",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Password reset",
          },
          "ref": null,
          "rendered": "Password reset",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                htmlFor="email"
              >
                Enter email:
              </label>,
              <input
                className="input"
                onChange={[Function]}
                placeholder="Your email.."
                require={true}
                type="email"
              />,
              <div
                className="preloader-wrapper small active"
                id="loader-div"
                style={
                  Object {
                    "display": "none",
                    "margin": "auto",
                  }
                }
              >
                <div
                  className="spinner-layer spinner-green-only"
                >
                  <div
                    className="circle-clipper left"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="gap-patch"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="circle-clipper right"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                </div>
              </div>,
              <br />,
              <label
                htmlFor="sucess"
                style={
                  Object {
                    "color": "green",
                  }
                }
              >
                Object {}
              </label>,
              <label
                htmlFor="invalid"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>,
              <label
                htmlFor="unregisterd"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />,
              <br />,
              <input
                type="submit"
                value="Submit"
              />,
            ],
            "className": "emailform",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Enter email:",
                "htmlFor": "email",
              },
              "ref": null,
              "rendered": "Enter email:",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "input",
                "onChange": [Function],
                "placeholder": "Your email..",
                "require": true,
                "type": "email",
              },
              "ref": [Function],
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="spinner-layer spinner-green-only"
                >
                  <div
                    className="circle-clipper left"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="gap-patch"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="circle-clipper right"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                </div>,
                "className": "preloader-wrapper small active",
                "id": "loader-div",
                "style": Object {
                  "display": "none",
                  "margin": "auto",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="circle-clipper left"
                    >
                      <div
                        className="circle"
                      />
                    </div>,
                    <div
                      className="gap-patch"
                    >
                      <div
                        className="circle"
                      />
                    </div>,
                    <div
                      className="circle-clipper right"
                    >
                      <div
                        className="circle"
                      />
                    </div>,
                  ],
                  "className": "spinner-layer spinner-green-only",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="circle"
                      />,
                      "className": "circle-clipper left",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "circle",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="circle"
                      />,
                      "className": "gap-patch",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "circle",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="circle"
                      />,
                      "className": "circle-clipper right",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "circle",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Object {},
                "htmlFor": "sucess",
                "style": Object {
                  "color": "green",
                },
              },
              "ref": null,
              "rendered": Object {},
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "htmlFor": "invalid",
                "style": Object {
                  "color": "red",
                },
              },
              "ref": null,
              "rendered": "",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "htmlFor": "unregisterd",
                "style": Object {
                  "color": "red",
                },
              },
              "ref": null,
              "rendered": null,
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
                "value": "Submit",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="homediv"
        >
          <h2>
            Password reset
          </h2>
          <form
            className="emailform"
            onSubmit={[Function]}
          >
            <label
              htmlFor="email"
            >
              Enter email:
            </label>
            <input
              className="input"
              onChange={[Function]}
              placeholder="Your email.."
              require={true}
              type="email"
            />
            <div
              className="preloader-wrapper small active"
              id="loader-div"
              style={
                Object {
                  "display": "none",
                  "margin": "auto",
                }
              }
            >
              <div
                className="spinner-layer spinner-green-only"
              >
                <div
                  className="circle-clipper left"
                >
                  <div
                    className="circle"
                  />
                </div>
                <div
                  className="gap-patch"
                >
                  <div
                    className="circle"
                  />
                </div>
                <div
                  className="circle-clipper right"
                >
                  <div
                    className="circle"
                  />
                </div>
              </div>
            </div>
            <br />
            <label
              htmlFor="sucess"
              style={
                Object {
                  "color": "green",
                }
              }
            >
              Object {}
            </label>
            <label
              htmlFor="invalid"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <label
              htmlFor="unregisterd"
              style={
                Object {
                  "color": "red",
                }
              }
            />
            <br />
            <input
              type="submit"
              value="Submit"
            />
          </form>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h2>
              Password reset
            </h2>,
            <form
              className="emailform"
              onSubmit={[Function]}
            >
              <label
                htmlFor="email"
              >
                Enter email:
              </label>
              <input
                className="input"
                onChange={[Function]}
                placeholder="Your email.."
                require={true}
                type="email"
              />
              <div
                className="preloader-wrapper small active"
                id="loader-div"
                style={
                  Object {
                    "display": "none",
                    "margin": "auto",
                  }
                }
              >
                <div
                  className="spinner-layer spinner-green-only"
                >
                  <div
                    className="circle-clipper left"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="gap-patch"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                  <div
                    className="circle-clipper right"
                  >
                    <div
                      className="circle"
                    />
                  </div>
                </div>
              </div>
              <br />
              <label
                htmlFor="sucess"
                style={
                  Object {
                    "color": "green",
                  }
                }
              >
                Object {}
              </label>
              <label
                htmlFor="invalid"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>
              <label
                htmlFor="unregisterd"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
              <br />
              <input
                type="submit"
                value="Submit"
              />
            </form>,
          ],
          "className": "homediv",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Password reset",
            },
            "ref": null,
            "rendered": "Password reset",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <label
                  htmlFor="email"
                >
                  Enter email:
                </label>,
                <input
                  className="input"
                  onChange={[Function]}
                  placeholder="Your email.."
                  require={true}
                  type="email"
                />,
                <div
                  className="preloader-wrapper small active"
                  id="loader-div"
                  style={
                    Object {
                      "display": "none",
                      "margin": "auto",
                    }
                  }
                >
                  <div
                    className="spinner-layer spinner-green-only"
                  >
                    <div
                      className="circle-clipper left"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                    <div
                      className="gap-patch"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                    <div
                      className="circle-clipper right"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                  </div>
                </div>,
                <br />,
                <label
                  htmlFor="sucess"
                  style={
                    Object {
                      "color": "green",
                    }
                  }
                >
                  Object {}
                </label>,
                <label
                  htmlFor="invalid"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                >
                  
                </label>,
                <label
                  htmlFor="unregisterd"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />,
                <br />,
                <input
                  type="submit"
                  value="Submit"
                />,
              ],
              "className": "emailform",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Enter email:",
                  "htmlFor": "email",
                },
                "ref": null,
                "rendered": "Enter email:",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "input",
                  "onChange": [Function],
                  "placeholder": "Your email..",
                  "require": true,
                  "type": "email",
                },
                "ref": [Function],
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="spinner-layer spinner-green-only"
                  >
                    <div
                      className="circle-clipper left"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                    <div
                      className="gap-patch"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                    <div
                      className="circle-clipper right"
                    >
                      <div
                        className="circle"
                      />
                    </div>
                  </div>,
                  "className": "preloader-wrapper small active",
                  "id": "loader-div",
                  "style": Object {
                    "display": "none",
                    "margin": "auto",
                  },
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="circle-clipper left"
                      >
                        <div
                          className="circle"
                        />
                      </div>,
                      <div
                        className="gap-patch"
                      >
                        <div
                          className="circle"
                        />
                      </div>,
                      <div
                        className="circle-clipper right"
                      >
                        <div
                          className="circle"
                        />
                      </div>,
                    ],
                    "className": "spinner-layer spinner-green-only",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <div
                          className="circle"
                        />,
                        "className": "circle-clipper left",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "circle",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "div",
                      },
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <div
                          className="circle"
                        />,
                        "className": "gap-patch",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "circle",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "div",
                      },
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <div
                          className="circle"
                        />,
                        "className": "circle-clipper right",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "circle",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "div",
                      },
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Object {},
                  "htmlFor": "sucess",
                  "style": Object {
                    "color": "green",
                  },
                },
                "ref": null,
                "rendered": Object {},
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "htmlFor": "invalid",
                  "style": Object {
                    "color": "red",
                  },
                },
                "ref": null,
                "rendered": "",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "htmlFor": "unregisterd",
                  "style": Object {
                    "color": "red",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Submit",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
