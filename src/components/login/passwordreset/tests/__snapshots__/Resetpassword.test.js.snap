// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component should render password reset form 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Resetpassword
    errors={Object {}}
    match={
      Object {
        "params": Object {
          "token": "hgfukjk",
        },
      }
    }
    message="Succesful"
    resetPassword={[MockFunction]}
    success={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="homediv"
      >
        <h2>
          Enter New Password
        </h2>
        <form
          className="emailform"
          onSubmit={[Function]}
        >
          <label
            htmlFor="password"
          >
            Enter new password:
          </label>
          <input
            className="input"
            id="password"
            onChange={[Function]}
            pattern="(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).{8,}"
            placeholder="Enter your new password.."
            require={true}
            title="Must contain at least one number and one uppercase and lowercase letter and a special character, and at least 8 or more characters"
            type="password"
          />
          <label
            htmlFor="msgerror"
            style={
              Object {
                "color": "red",
              }
            }
          >
            
          </label>
          <br />
          <br />
          <label
            htmlFor="password"
          >
            Confirm password:
          </label>
          <input
            id="confirm_password"
            onChange={[Function]}
            placeholder="confirm password.."
            require={true}
            type="password"
          />
          <label
            htmlFor="error"
            style={
              Object {
                "color": "red",
              }
            }
          >
            
          </label>
          <label
            htmlFor="mismatch"
            style={
              Object {
                "color": "red",
              }
            }
          >
            
          </label>
          <div
            id="loader-div"
            style={
              Object {
                "display": "none",
                "margin": "auto",
              }
            }
          >
            <div
              className="progress"
            >
              <div
                className="indeterminate"
              />
            </div>
          </div>
          <br />
          <br />
          <label
            htmlFor="pass"
            style={
              Object {
                "color": "green",
              }
            }
          >
            
          </label>
          <br />
          <input
            type="submit"
            value="Submit"
          />
        </form>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Enter New Password
          </h2>,
          <form
            className="emailform"
            onSubmit={[Function]}
          >
            <label
              htmlFor="password"
            >
              Enter new password:
            </label>
            <input
              className="input"
              id="password"
              onChange={[Function]}
              pattern="(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).{8,}"
              placeholder="Enter your new password.."
              require={true}
              title="Must contain at least one number and one uppercase and lowercase letter and a special character, and at least 8 or more characters"
              type="password"
            />
            <label
              htmlFor="msgerror"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <br />
            <br />
            <label
              htmlFor="password"
            >
              Confirm password:
            </label>
            <input
              id="confirm_password"
              onChange={[Function]}
              placeholder="confirm password.."
              require={true}
              type="password"
            />
            <label
              htmlFor="error"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <label
              htmlFor="mismatch"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <div
              id="loader-div"
              style={
                Object {
                  "display": "none",
                  "margin": "auto",
                }
              }
            >
              <div
                className="progress"
              >
                <div
                  className="indeterminate"
                />
              </div>
            </div>
            <br />
            <br />
            <label
              htmlFor="pass"
              style={
                Object {
                  "color": "green",
                }
              }
            >
              
            </label>
            <br />
            <input
              type="submit"
              value="Submit"
            />
          </form>,
        ],
        "className": "homediv",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Enter New Password",
          },
          "ref": null,
          "rendered": "Enter New Password",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                htmlFor="password"
              >
                Enter new password:
              </label>,
              <input
                className="input"
                id="password"
                onChange={[Function]}
                pattern="(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).{8,}"
                placeholder="Enter your new password.."
                require={true}
                title="Must contain at least one number and one uppercase and lowercase letter and a special character, and at least 8 or more characters"
                type="password"
              />,
              <label
                htmlFor="msgerror"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>,
              <br />,
              <br />,
              <label
                htmlFor="password"
              >
                Confirm password:
              </label>,
              <input
                id="confirm_password"
                onChange={[Function]}
                placeholder="confirm password.."
                require={true}
                type="password"
              />,
              <label
                htmlFor="error"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>,
              <label
                htmlFor="mismatch"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>,
              <div
                id="loader-div"
                style={
                  Object {
                    "display": "none",
                    "margin": "auto",
                  }
                }
              >
                <div
                  className="progress"
                >
                  <div
                    className="indeterminate"
                  />
                </div>
              </div>,
              <br />,
              <br />,
              <label
                htmlFor="pass"
                style={
                  Object {
                    "color": "green",
                  }
                }
              >
                
              </label>,
              <br />,
              <input
                type="submit"
                value="Submit"
              />,
            ],
            "className": "emailform",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Enter new password:",
                "htmlFor": "password",
              },
              "ref": null,
              "rendered": "Enter new password:",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "input",
                "id": "password",
                "onChange": [Function],
                "pattern": "(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).{8,}",
                "placeholder": "Enter your new password..",
                "require": true,
                "title": "Must contain at least one number and one uppercase and lowercase letter and a special character, and at least 8 or more characters",
                "type": "password",
              },
              "ref": [Function],
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "htmlFor": "msgerror",
                "style": Object {
                  "color": "red",
                },
              },
              "ref": null,
              "rendered": "",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Confirm password:",
                "htmlFor": "password",
              },
              "ref": null,
              "rendered": "Confirm password:",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "id": "confirm_password",
                "onChange": [Function],
                "placeholder": "confirm password..",
                "require": true,
                "type": "password",
              },
              "ref": [Function],
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "htmlFor": "error",
                "style": Object {
                  "color": "red",
                },
              },
              "ref": null,
              "rendered": "",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "htmlFor": "mismatch",
                "style": Object {
                  "color": "red",
                },
              },
              "ref": null,
              "rendered": "",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="progress"
                >
                  <div
                    className="indeterminate"
                  />
                </div>,
                "id": "loader-div",
                "style": Object {
                  "display": "none",
                  "margin": "auto",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="indeterminate"
                  />,
                  "className": "progress",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "indeterminate",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "div",
                },
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "htmlFor": "pass",
                "style": Object {
                  "color": "green",
                },
              },
              "ref": null,
              "rendered": "",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
                "value": "Submit",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="homediv"
        >
          <h2>
            Enter New Password
          </h2>
          <form
            className="emailform"
            onSubmit={[Function]}
          >
            <label
              htmlFor="password"
            >
              Enter new password:
            </label>
            <input
              className="input"
              id="password"
              onChange={[Function]}
              pattern="(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).{8,}"
              placeholder="Enter your new password.."
              require={true}
              title="Must contain at least one number and one uppercase and lowercase letter and a special character, and at least 8 or more characters"
              type="password"
            />
            <label
              htmlFor="msgerror"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <br />
            <br />
            <label
              htmlFor="password"
            >
              Confirm password:
            </label>
            <input
              id="confirm_password"
              onChange={[Function]}
              placeholder="confirm password.."
              require={true}
              type="password"
            />
            <label
              htmlFor="error"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <label
              htmlFor="mismatch"
              style={
                Object {
                  "color": "red",
                }
              }
            >
              
            </label>
            <div
              id="loader-div"
              style={
                Object {
                  "display": "none",
                  "margin": "auto",
                }
              }
            >
              <div
                className="progress"
              >
                <div
                  className="indeterminate"
                />
              </div>
            </div>
            <br />
            <br />
            <label
              htmlFor="pass"
              style={
                Object {
                  "color": "green",
                }
              }
            >
              
            </label>
            <br />
            <input
              type="submit"
              value="Submit"
            />
          </form>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h2>
              Enter New Password
            </h2>,
            <form
              className="emailform"
              onSubmit={[Function]}
            >
              <label
                htmlFor="password"
              >
                Enter new password:
              </label>
              <input
                className="input"
                id="password"
                onChange={[Function]}
                pattern="(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).{8,}"
                placeholder="Enter your new password.."
                require={true}
                title="Must contain at least one number and one uppercase and lowercase letter and a special character, and at least 8 or more characters"
                type="password"
              />
              <label
                htmlFor="msgerror"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>
              <br />
              <br />
              <label
                htmlFor="password"
              >
                Confirm password:
              </label>
              <input
                id="confirm_password"
                onChange={[Function]}
                placeholder="confirm password.."
                require={true}
                type="password"
              />
              <label
                htmlFor="error"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>
              <label
                htmlFor="mismatch"
                style={
                  Object {
                    "color": "red",
                  }
                }
              >
                
              </label>
              <div
                id="loader-div"
                style={
                  Object {
                    "display": "none",
                    "margin": "auto",
                  }
                }
              >
                <div
                  className="progress"
                >
                  <div
                    className="indeterminate"
                  />
                </div>
              </div>
              <br />
              <br />
              <label
                htmlFor="pass"
                style={
                  Object {
                    "color": "green",
                  }
                }
              >
                
              </label>
              <br />
              <input
                type="submit"
                value="Submit"
              />
            </form>,
          ],
          "className": "homediv",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Enter New Password",
            },
            "ref": null,
            "rendered": "Enter New Password",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <label
                  htmlFor="password"
                >
                  Enter new password:
                </label>,
                <input
                  className="input"
                  id="password"
                  onChange={[Function]}
                  pattern="(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).{8,}"
                  placeholder="Enter your new password.."
                  require={true}
                  title="Must contain at least one number and one uppercase and lowercase letter and a special character, and at least 8 or more characters"
                  type="password"
                />,
                <label
                  htmlFor="msgerror"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                >
                  
                </label>,
                <br />,
                <br />,
                <label
                  htmlFor="password"
                >
                  Confirm password:
                </label>,
                <input
                  id="confirm_password"
                  onChange={[Function]}
                  placeholder="confirm password.."
                  require={true}
                  type="password"
                />,
                <label
                  htmlFor="error"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                >
                  
                </label>,
                <label
                  htmlFor="mismatch"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                >
                  
                </label>,
                <div
                  id="loader-div"
                  style={
                    Object {
                      "display": "none",
                      "margin": "auto",
                    }
                  }
                >
                  <div
                    className="progress"
                  >
                    <div
                      className="indeterminate"
                    />
                  </div>
                </div>,
                <br />,
                <br />,
                <label
                  htmlFor="pass"
                  style={
                    Object {
                      "color": "green",
                    }
                  }
                >
                  
                </label>,
                <br />,
                <input
                  type="submit"
                  value="Submit"
                />,
              ],
              "className": "emailform",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Enter new password:",
                  "htmlFor": "password",
                },
                "ref": null,
                "rendered": "Enter new password:",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "input",
                  "id": "password",
                  "onChange": [Function],
                  "pattern": "(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).{8,}",
                  "placeholder": "Enter your new password..",
                  "require": true,
                  "title": "Must contain at least one number and one uppercase and lowercase letter and a special character, and at least 8 or more characters",
                  "type": "password",
                },
                "ref": [Function],
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "htmlFor": "msgerror",
                  "style": Object {
                    "color": "red",
                  },
                },
                "ref": null,
                "rendered": "",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Confirm password:",
                  "htmlFor": "password",
                },
                "ref": null,
                "rendered": "Confirm password:",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "id": "confirm_password",
                  "onChange": [Function],
                  "placeholder": "confirm password..",
                  "require": true,
                  "type": "password",
                },
                "ref": [Function],
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "htmlFor": "error",
                  "style": Object {
                    "color": "red",
                  },
                },
                "ref": null,
                "rendered": "",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "htmlFor": "mismatch",
                  "style": Object {
                    "color": "red",
                  },
                },
                "ref": null,
                "rendered": "",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="progress"
                  >
                    <div
                      className="indeterminate"
                    />
                  </div>,
                  "id": "loader-div",
                  "style": Object {
                    "display": "none",
                    "margin": "auto",
                  },
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <div
                      className="indeterminate"
                    />,
                    "className": "progress",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "indeterminate",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                  "type": "div",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "htmlFor": "pass",
                  "style": Object {
                    "color": "green",
                  },
                },
                "ref": null,
                "rendered": "",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Submit",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
